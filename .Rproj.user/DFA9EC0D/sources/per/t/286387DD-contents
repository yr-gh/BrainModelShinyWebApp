library(shiny)
library(dplyr)
library(magrittr)
library(stringr)
library(png)
library(pdftools)

ungrouped_barUI <- function(id) {
  tabPanel(
    "Ungrouped Bar",
    
    h4("0. Introduction"),
    tags$p("Ungrouped bar is designed to draw bar chart. It only supports Student's T-Test, comparing the control group with all other experimental groups; or ANOVA, to be developed if needed."),
    
    h4("1. Usage"),
    tags$ol(
      tags$li("Upload data file, whose columns must have headers and be separated by '\\t', or ',' (i.e., '.tsv', or '.csv' file)."),
      tags$li("Set plotting parameters. For axis titles and labels, Markdown or HTML style is supported now (e.g., using <sup>2+</sup> to let 2+ be a superscript). For detailed usage of the two, you can search 'the basic language grammar of Markdown or HTML' in any your favorite search engine."),
      tags$li("Adjust the width and height of the plot."),
      tags$li("If the plot is as expected, a PDF version of the plot is downloadable.")
    ),
    
    h4("2. Upload Data File"),
    fileInput(NS(id, "file"), NULL, buttonLabel = "Upload", multiple = F),
    tags$b("Note: you can preview the first 4 lines of your data to see if it's read as expected."),
    fluidRow(
      column(12, align = "center",
             tableOutput(NS(id, "file_preview"))
      )
    ),
    tags$b("Note: please select two columns with which you want to plot."),
    fluidRow(
      column(6, align = "left",
             uiOutput(NS(id, "select_input_for_group_variable"))
      ),
      column(6, align = "left",
             uiOutput(NS(id, "select_input_for_value_variable"))
      )
    ),
    
    h4("3. Set Parameters"),
    fluidRow(
      column(4, align = "left",
             checkboxInput(NS(id, "using_sd"), "Using SD Instead of SEM?", T)
      ),
      column(4, align = "left",
             checkboxInput(NS(id, "using_jitter"), "Using Jitter Instead of Dotplot?", T)
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             textInput(NS(id, "group_levels"), "Group Levels:", "", placeholder = "Separated by ,", width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "max_data_value_scaling_factor"), "Scaling Factor on Maximum Data Value:", 0, width = "100%") 
      ),
      column(4, align = "left",
             numericInput(NS(id, "x_axis_label_rotation"), "X-axis Label Rotation:", 45, width = "100%") 
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             textInput(NS(id, "x_axis_title"), "X-axis Title:", "Group", width = "100%")
      ),
      column(4, align = "left",
             textInput(NS(id, "y_axis_title"), "Y-axis Title:", "Value", width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "bar_width"), "Bar Width:", 0.9, width = "100%")
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             selectInput(NS(id, "stack_dir"), "Stack Direction:", c("up", "down", "center", "centerwhole"), selected = "center", multiple = F, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "stack_ratio"), "Stack Ratio (dot closeness):", 1, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "sig_level_scaling_factor"), "Significance Level Scaling Factor:", 100, width = "100%")
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             numericInput(NS(id, "sig_level_label_size"), "Significance Level Label Size:", 10, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "base_font_size"), "Global Base Font Size:", 18, width = "100%")
      ),
      column(4, align = "left",
             textInput(NS(id, "y_breaks"), "Y-axis Breaks:", "", placeholder = "Separated by ,", width = "100%")
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             numericInput(NS(id, "bar_line_width"), "Bar Line Width:", 1, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "errorbar_line_width"), "Error Bar Line Width:", 1, width = "100%")
      ),
      column(4, align = "left",
             textInput(NS(id, "fill_color"), "Fill Colors:", "", placeholder = "Separated by ,", width = "100%")
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             numericInput(NS(id, "jitter_width"), "Jitter Width:", 0, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "jitter_height"), "Jitter Height:", 0, width = "100%")
      ),
      column(4, align = "left",
             textInput(NS(id, "line_color"), "Line Colors:", "", placeholder = "Separated by ,", width = "100%")
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             numericInput(NS(id, "point_size"), "Point Size (jitter):", 3, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "dot_size"), "Dot Size (dotplot):", 0.5, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "bin_width"), "Bin Width (dotplot; non-negative):", -1, width = "100%")
      )
    ),
    
    fluidRow(
      column(4, align = "left",
             numericInput(NS(id, "point_offset"), "Point Offset:", 0.2, width = "100%")
      ),
      column(4, align = "left",
             selectInput(NS(id, "point_shape"), "Point Shape:", c("circle", paste("circle", c("open", "filled", "cross", "plus", "small")), "bullet", "square", paste("square", c("open", "filled", "cross", "plus", "triangle")), "diamond", paste("diamond", c("open", "filled", "plus")), "triangle", paste("triangle", c("open", "filled", "square")), paste("triangle down", c("open", "filled")), "plus", "cross", "asterisk"), selected = "circle open", multiple = F, width = "100%")
      ),
      column(4, align = "left",
             numericInput(NS(id, "errorbar_width"), "Error Bar Width:", 0.5, width = "100%")
      )
    ),
    
    fluidRow(
      column(12, align = "left",
             textInput(NS(id, "x_labels"), "Rename X-axis Labels (the same order as group levels):", "", placeholder = "Separated by &&&", width = "100%")
      )
    ),
    
    h4("4. Figure Preview"),
    fluidRow(
      column(6, align = "left",
             sliderInput(NS(id, "height"), "Figure Height:", min = 100, max = 4000, value = 400, width = "100%")
      ),
      column(6, align = "left",
             sliderInput(NS(id, "width"), "Figure Width:", min = 100, max = 4000, value = 400, width = "100%")
      )
    ),
    
    fluidRow(
      column(12, align = "center",
             plotOutput(NS(id, "ungrouped_bar_plot"), width = "100%", height = "100%")
      )
    ),
    
    h4("5. PDF Preview"),
    fluidRow(
      column(12, align = "left",
             tags$b("Note: if the figure generated above is as expected, you can select the following check box to preview and adjust the width and height of the PDF file.")
      )
    ),
    fluidRow(
      column(12, align = "left",
             checkboxInput(NS(id, "sure_to_preview_pdf"), "Preview the PDF File?", F)
      )
    ),
    fluidRow(
      column(6, align = "left",
             numericInput(NS(id, "pdf_height"), "PDF Height (ranging from 2cm to 200cm):", 10, min = 2, max = 200, width = "100%")
      ),
      column(6, align = "left",
             numericInput(NS(id, "pdf_width"), "PDF Width (ranging from 2cm to 200cm):", 10, min = 2, max = 200, width = "100%")
      )
    ),
    
    fluidRow(
      column(12, align = "center",
             imageOutput(NS(id, "pdf_preview"), width = "100%", height = "100%")
      )
    ),
    
    h4("6. Download PDF File"),
    fluidRow(
      column(12, align = "center",
             downloadButton(NS(id, "result_download"), "Download")
      )
    )
  )
}

ungrouped_barServer <- function(id, session_id) {
  moduleServer(id, function(input, output, session) {
    raw_data <- reactive({
      req(input$file)
      
      vroom::vroom(input$file$datapath)
    })
    
    output$file_preview <- renderTable(head(raw_data(), n = 4))
    
    output$select_input_for_group_variable <- renderUI({
      selectInput(NS(id, "group_variable"), "Select Group Variable:", names(raw_data()), multiple = F, width = "100%")
    })
    
    output$select_input_for_value_variable <- renderUI({
      selectInput(NS(id, "value_variable"), "Select Value Variable:", names(raw_data()), multiple = F, width = "100%")
    })
    
    output_file_id <- reactive({
      paste0(input$value_variable, "_vs_", input$group_variable, "_", session_id)
    })
    
    group_levels <- reactive({
      if (input$group_levels == "") unique(raw_data()[[input$group_variable]]) else str_split(input$group_levels, ",")[[1]]
    })
    
    x_labels <- reactive({
      if (input$x_labels == "") setNames(group_levels(), group_levels()) else setNames(str_split(input$x_labels, "&&&")[[1]], group_levels())
    })
    
    clean_data <- reactive({
      raw_data() %>% 
        select(all_of(c(input$group_variable, input$value_variable))) %>% 
        set_colnames(c("group", "value")) %>% 
        mutate(group = factor(group, levels = group_levels()))
    })
    
    y_breaks <- reactive({
      if (input$y_breaks == "") YBreaks(clean_data(), input$max_data_value_scaling_factor) else as.numeric(str_split(input$y_breaks, ",")[[1]])
    })
    
    y_range <- reactive({
      YRange(y_breaks())
    })
    
    bin_width <- reactive({
      if (input$bin_width < 0) abs(max(clean_data()$value) - min(clean_data()$value)) / 30 else input$bin_width
    })
    
    sig_level <- reactive({
      TTestOverControl(clean_data(), group_levels(), input$sig_level_scaling_factor)
    })
    
    fig_args <- reactive({
      list("using_sd" = input$using_sd, "using_jitter" = input$using_jitter, "bar_line_width" = input$bar_line_width,
           "errorbar_line_width" = input$errorbar_line_width, "point_offset" = input$point_offset, "point_shape" = input$point_shape,
           "fill_color" = input$fill_color, "line_color" = input$line_color, "jitter_width" = input$jitter_width, "jitter_height" = input$jitter_height,
           "point_size" = input$point_size, "base_font_size" = input$base_font_size, "dot_size" = input$dot_size, "stack_dir" = input$stack_dir,
           "stack_ratio" = input$stack_ratio, "bin_width" = bin_width(), "errorbar_width" = input$errorbar_width, "x_axis_label_rotation" = input$x_axis_label_rotation,
           "sig_level_label_size" = input$sig_level_label_size, "y_breaks" = y_breaks(), "y_range" = y_range(), "bar_width" = input$bar_width,
           "x_axis_title" = input$x_axis_title, "y_axis_title" = input$y_axis_title, "x_labels" = x_labels())
    })
    
    data_stat <- reactive({
      BasicStatByGroup(clean_data())
    })
    
    p <- reactive({
      UngroupedGGBar(clean_data(), data_stat(), sig_level(), fig_args())
    })
    
    output$ungrouped_bar_plot <- renderPlot(
      width = function() input$width,
      height = function() input$height,
      res = 96,
      {
        p()
      }
    )
    
    pdf_file <- reactive({
      req(input$sure_to_preview_pdf)
      
      ggsave(file.path(".", paste0("ungrouped_bar_plot_", output_file_id(), ".pdf")),
             p(), device = "pdf", limitsize = F,
             width = unit(input$pdf_width, "cm"),
             height = unit(input$pdf_height, "cm"))
      file.path(".", paste0("ungrouped_bar_plot_", output_file_id(), ".pdf"))
    })
    
    pdf_preview_file <- reactive({
      pdf_convert(pdf_file(),
                  filenames = file.path(".", paste0("ungrouped_bar_plot_", output_file_id(), ".png")),
                  format = "png", pages = 1, dpi = 72)
      file.path(".", paste0("ungrouped_bar_plot_", output_file_id(), ".png"))
    })
    
    pdf_preview_size <- reactive({
      dim(readPNG(pdf_preview_file()))
    })
    
    output$pdf_preview <- renderImage({
      list(
        src = pdf_preview_file(),
        contentType = "image/png",
        width = pdf_preview_size()[2],
        height = pdf_preview_size()[1]
      )
    }, deleteFile = F)
    
    basic_stat_file <- reactive({
      vroom::vroom_write(data_stat(), file = file.path(".", paste0("ungrouped_bar_plot_basic_stat_", output_file_id(), ".tsv")), delim = "\t")
      file.path(".", paste0("ungrouped_bar_plot_basic_stat_", output_file_id(), ".tsv"))
    })
    
    t_test_res_file <- reactive({
      vroom::vroom_write(sig_level(), file = file.path(".", paste0("ungrouped_bar_plot_t_test_", output_file_id(), ".tsv")), delim = "\t")
      file.path(".", paste0("ungrouped_bar_plot_t_test_", output_file_id(), ".tsv"))
    })
    
    clean_data_file <- reactive({
      vroom::vroom_write(clean_data(), file = file.path(".", paste0("ungrouped_bar_plot_clean_data_", output_file_id(), ".tsv")), delim = "\t")
      file.path(".", paste0("ungrouped_bar_plot_clean_data_", output_file_id(), ".tsv"))
    })
    
    output$result_download <- downloadHandler(
      filename = function() {
        paste0("ungroupped_bar_plot_", output_file_id(), ".zip")
      },
      content = function(file) {
        zip(file, c(pdf_file(), basic_stat_file(), t_test_res_file(), clean_data_file()))
      },
      contentType = "application/zip"
    )
  })
}
